apply plugin: 'com.android.application'
def bakPath = file("${buildDir}/bakApk")//build目录下生成bakApk目录
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.example.a58.tinker"
        minSdkVersion 22
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            storeFile file('zjy.keystore')
            keyPassword 'zjy'
            keyAlias 'zjy'
            storePassword 'zjy'
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    //生成application时使用,只在编译的时候起作用打包时不会打入apk中
    provided "com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}"
    //核心sdk库
    compile "com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}"
    compile('com.android.support:multidex:1.0.1')
    testCompile 'junit:junit:4.12'
    compile 'com.jakewharton:butterknife:7.0.1'
}
ext {
    tinkerEnable = true//是否启用tinker
    tinkerTinkerId = "1.0"
    tinkerOldApkPath = "${bakPath}/app-release-0817-11-20-13.apk"
    tinkerApplyMappingPath = "${bakPath}/app-release-0817-11-20-13-mapping.txt"
    tinkerApplyResourceMappingPath = "${bakPath}/app-release-0817-11-20-13-R.txt"
}

def buildWithTinker() {
    return ext.tinkerEnable
}

def getOldApkPath() {
    return ext.tinkerOldApkPath;
}

def getAppleMappingPath() {
    return ext.tinkerApplyMappingPath
}

def getAppleResourceMappingPath() {
    return ext.tinkerApplyResourceMappingPath
}

def getTinkerIdValue() {
    return ext.tinkerTinkerId
}

if (buildWithTinker()) {
    //启用Tinker
    apply plugin: 'com.tencent.tinker.patch'
    //所有tinker相关的参数配置
    tinkerPatch {
        oldApk = getOldApkPath()//指定oldApk的文件路径
        ignoreWarning = false   //不忽略tinker的警告，有警告则终止patch文件的生成
        useSign = true
        tinkerEnable = buildWithTinker()//指定是否启用tinker
        buildConfig {
            applyMapping = getAppleMappingPath()//指定old apk打包时所使用的混淆文件
            applyResourceMapping = getAppleResourceMappingPath()//指定oldapk的资源文件
            tinkerId = getTinkerIdValue()//指定TinkerID
            keepDexApply = false
        }
        dex {
            dexMode = "jar"
            pattern = ["classes*.dex", "assets/secondary-dex-?.jar"]//指定dex文件目录
            loader = ["com.tencent.tinker.loader.app.TinkerApplication"]//指定加载patch文件时用到的类
        }
        lib {
            pattern = ["lib/*/*.so"]

        }
        res {
            pattern = ["res/*", "assets/*", "resources.arcs", "AndroidManifest,xml"]//指定tinker可以修改的资源路径
            ignoreChange=["assets/sample_meta.txt"]//指定不受影响的资源路径
            largeModSize=100//资源修改大小默认值
        }
        packageConfig{//本次patch文件的相关信息
            configField("patchMessage","fix the 1.0  version's bugs")
            configField("patchVersion","1.0")
        }
    }
    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    /**
     * 复制基准包和其它必须文件到指定目录
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name
        def date = new Date().format("MMdd-HH-mm-ss")

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
    project.afterEvaluate {
        if (hasFlavors) {
            task(tinkerPatchAllFlavorRelease) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"
                    }
                }
            }

            task(tinkerPatchAllFlavorDebug) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                    }

                }
            }
        }
    }
}